name: Auto Format (Black + Ruff)

on:
  # Manual run. Use GitHub's native "Run workflow â†’ Branch" dropdown to pick a REAL branch.
  workflow_dispatch:
    inputs:
      target_branch:
        description: "Branch to format (leave empty to use current ref)"
        required: false
        default: ""

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# We need write permission to push formatting changes back
permissions:
  contents: write

jobs:
  format:
    # Prevent pushing from forks where GITHUB_TOKEN does not have write permissions
    if: github.repository_owner == 'eXPerience83'
    runs-on: ubuntu-latest

    steps:
      - name: Determine branch to format
        id: resolve_branch
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="${{ inputs.target_branch }}"
          if [ -z "$BRANCH" ]; then
            BRANCH="${GITHUB_REF_NAME}"
          fi
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

      - name: Checkout target branch
        uses: actions/checkout@v5
        with:
          # Checkout the branch we intend to format and push back to.
          ref: ${{ steps.resolve_branch.outputs.branch }}
          # Fetch full history to avoid push issues (fast-forward, etc.)
          fetch-depth: 0

      - name: Ensure branch exists remotely
        shell: bash
        run: |
          set -euo pipefail
          BRANCH="${{ steps.resolve_branch.outputs.branch }}"
          if ! git ls-remote --heads origin "$BRANCH" >/dev/null; then
            echo "::error::Target branch '$BRANCH' does not exist on origin."
            exit 1
          fi
          echo "Formatting branch: $BRANCH"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install formatters
        run: |
          python -m pip install --upgrade pip
          # Pin by minor to allow patch updates while avoiding major breaking changes
          python -m pip install "ruff==0.6.*" "black==24.*"

      - name: Ruff (safe fixes)
        run: |
          # Ruff reads config from pyproject.toml
          ruff --version
          ruff check . --fix

      - name: Black (format)
        run: |
          black --version
          black .

      - name: Commit & push if changes
        shell: bash
        run: |
          set -euo pipefail
          if git diff --quiet; then
            echo "No formatting changes to commit."
            exit 0
          fi
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "style: apply Ruff fixes and Black formatting"
          git push origin HEAD:${{ steps.resolve_branch.outputs.branch }}
